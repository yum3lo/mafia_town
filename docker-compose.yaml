version: "3.9"

# how to automatically start 3 instances for anything that is replicas: 3
# docker-compose --compatibility up -d

# after changes restart the service:
# docker-compose restart service_discovery

services:
  service_discovery:
    image: yum3lo/service-discovery:1.3
    container_name: service_discovery
    ports:
      - "8500:8500"
    environment:
      DISCOVERY_PORT: 8500
      NODE_ENV: production
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8500/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  gateway:
    image: yum3lo/mafia-gateway:3.9
    container_name: gateway
    ports:
      - "${GATEWAY_PORT}:3000"
    environment:
      USER_MANAGEMENT_URL: ${USER_MANAGEMENT_URL}
      GAME_SERVICE_URL: ${GAME_SERVICE_URL}
      COMMUNICATION_SERVICE_URL: ${COMMUNICATION_SERVICE_URL}
      RUMORS_SERVICE_URL: ${RUMORS_SERVICE_URL}
      SHOP_SERVICE_URL: ${SHOP_SERVICE_URL}
      ROLEPLAY_SERVICE_URL: ${ROLEPLAY_SERVICE_URL}
      CHARACTER_SERVICE_URL: ${CHARACTER_SERVICE_URL}
      TOWN_SERVICE_URL: ${TOWN_SERVICE_URL}
      TASK_SERVICE_URL: ${TASK_SERVICE_URL}
      VOTING_SERVICE_URL: ${VOTING_SERVICE_URL}
      REDIS_GAME_HOST: ${REDIS_GAME_HOST}
      REDIS_GAME_PORT: ${REDIS_GAME_PORT}
      INTERNAL_SERVICE_KEY: ${INTERNAL_SERVICE_KEY}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - user_management_service
      - communication_service
      - shop-service
      - roleplay-service
      - character_service
      - town_service
      - task-service
      - voting-service
      - redis_game
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_user_management:
    image: postgres:15
    container_name: user_management_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER_MANAGEMENT_USER}
      POSTGRES_PASSWORD: ${PG_USER_MANAGEMENT_PASSWORD}
      POSTGRES_DB: ${PG_USER_MANAGEMENT_DB}
    volumes:
      - postgres_user_management_data:/var/lib/postgresql/data
      - ./db/user_management_service.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${PG_USER_MANAGEMENT_USER} -d ${PG_USER_MANAGEMENT_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_shop:
    image: postgres:15
    container_name: shop_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_SHOP_USER}
      POSTGRES_PASSWORD: ${PG_SHOP_PASSWORD}
      POSTGRES_DB: ${PG_SHOP_DB}
    volumes:
      - postgres_shop_data:/var/lib/postgresql/data
      - ./db/customization_shop_service.sql:/docker-entrypoint-initdb.d/customization_shop_service.sql

  postgres_communication:
    image: postgres:15
    container_name: communication_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_COMMUNICATION_USER}
      POSTGRES_PASSWORD: ${PG_COMMUNICATION_PASSWORD}
      POSTGRES_DB: ${PG_COMMUNICATION_DB}
    volumes:
      - postgres_communication_data:/var/lib/postgresql/data
      - ./db/communication_service.sql:/docker-entrypoint-initdb.d/init.sql

  postgres_rumor:
    image: postgres:15
    container_name: rumor_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_RUMOR_USER}
      POSTGRES_PASSWORD: ${PG_RUMOR_PASSWORD}
      POSTGRES_DB: ${PG_RUMOR_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - postgres_rumor_data:/var/lib/postgresql/data
      - ./db/rumors_service.sql:/docker-entrypoint-initdb.d/rumor_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_RUMOR_USER} -d ${PG_RUMOR_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_character:
    image: postgres:15
    container_name: character_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_CHARACTER_USER}
      POSTGRES_PASSWORD: ${PG_CHARACTER_PASSWORD}
      POSTGRES_DB: ${PG_CHARACTER_DB}
    volumes:
      - postgres_character_data:/var/lib/postgresql/data
      - ./db/character_service.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${PG_CHARACTER_USER} -d ${PG_CHARACTER_DB}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_town:
    image: postgres:15
    container_name: town_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_TOWN_USER}
      POSTGRES_PASSWORD: ${PG_TOWN_PASSWORD}
      POSTGRES_DB: ${PG_TOWN_DB}
    volumes:
      - postgres_town_data:/var/lib/postgresql/data
      - ./db/town_service.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_TOWN_USER} -d ${PG_TOWN_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_tasks:
    image: postgres:15
    container_name: tasks_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_TASK_USER}
      POSTGRES_PASSWORD: ${PG_TASK_PASSWORD}
      POSTGRES_DB: ${PG_TASK_DB}
    volumes:
      - postgres_tasks_data:/var/lib/postgresql/data

  postgres_voting:
    image: postgres:15
    container_name: voting_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_VOTING_USER}
      POSTGRES_PASSWORD: ${PG_VOTING_PASSWORD}
      POSTGRES_DB: ${PG_VOTING_DB}
    volumes:
      - postgres_voting_data:/var/lib/postgresql/data

  redis_game:
    image: redis:7
    container_name: game_cache
    restart: always
    environment:
      REDIS_GAME_HOST: redis_game
      REDIS_GAME_PORT: 6379
    volumes:
      - redis_game_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  redis_seeder_game:
    image: node:18
    container_name: redis_seeder_game
    depends_on:
      - redis_game
    volumes:
      - ./db/game_service.mjs:/app/game_service.mjs
    environment:
      REDIS_GAME_HOST: ${REDIS_GAME_HOST}
      REDIS_GAME_PORT: ${REDIS_GAME_PORT}
    working_dir: /app
    command: ["sh", "-c", "npm install redis && node game_service.mjs"]
    restart: "on-failure"

  redis_roleplay:
    image: redis:7
    container_name: roleplay_cache
    restart: always
    ports:
      - "${REDIS_ROLEPLAY_PORT}:6379"
    volumes:
      - redis_roleplay_data:/data

  redis_communication:
    image: redis:7
    container_name: communication_cache
    restart: always
    ports:
      - "${REDIS_COMMUNICATION_PORT}:6379"
    volumes:
      - redis_communication_data:/data

  redis_task:
    image: redis:7
    container_name: redis_task
    restart: always
    ports:
      - "6382:6379"
    volumes:
      - redis_task_data:/data

  redis_voting:
    image: redis:7
    container_name: redis_voting
    restart: always
    ports:
      - "6383:6379"
    volumes:
      - redis_voting_data:/data

  # each instance needs a unique name so container_name no longer needed
  # gateway will communicate via internal network so ports mapping no longer needed

  user_management_service:
    image: yum3lo/mafia-user_management-service:1.7
    deploy:
      replicas: 3
    depends_on:
      - postgres_user_management
    environment:
      DATABASE_URL: "postgresql://${PG_USER_MANAGEMENT_USER}:${PG_USER_MANAGEMENT_PASSWORD}@postgres_user_management:5432/${PG_USER_MANAGEMENT_DB}"
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_SERVICE_KEY: ${INTERNAL_SERVICE_KEY}

  game_service:
    image: yum3lo/mafia-game-service:2.1
    deploy:
      replicas: 3
    depends_on:
      - redis_game
      - gateway
    environment:
      SERVER_GAME_PORT: 3002
      REDIS_GAME_HOST: ${REDIS_GAME_HOST}
      REDIS_GAME_PORT: 6379
      GATEWAY_URL: http://gateway:3000
      INTERNAL_SERVICE_KEY: ${INTERNAL_SERVICE_KEY}

  communication_service:
    image: valeriafz/mafia-communication-service:1.9
    deploy:
      replicas: 3
    environment:
      NODE_ENV: production
      DATABASE_URL: "postgresql://${PG_COMMUNICATION_USER}:${PG_COMMUNICATION_PASSWORD}@postgres_communication:5432/${PG_COMMUNICATION_DB}"
      REDIS_URL: redis://redis_communication:6379
      PORT: 3003
      SERVICE_NAME: communication_service
      SERVICE_DISCOVERY_URL: ${SERVICE_DISCOVERY_URL}
      USER_SERVICE_URL: ${USER_MANAGEMENT_URL}
      GAME_SERVICE_URL: ${GAME_SERVICE_URL}
      TOWN_SERVICE_URL: ${TOWN_SERVICE_URL}
    depends_on:
      - postgres_communication
      - redis_communication
      - user_management_service
      - town_service
    restart: unless-stopped

  rumor_service:
    image: valeriafz/rumors-service:v1.7
    deploy:
      replicas: 3
    restart: always
    environment:
      DATABASE_URL: "postgresql://${PG_RUMOR_USER}:${PG_RUMOR_PASSWORD}@postgres_rumor:5432/${PG_RUMOR_DB}?schema=public"
      NODE_ENV: development
      PORT: 3004
      SERVICE_NAME: rumor_service
      SERVICE_DISCOVERY_URL: ${SERVICE_DISCOVERY_URL}
      TASK_SERVICE_URL: ${TASK_SERVICE_URL}
      CHARACTER_SERVICE_URL: ${CHARACTER_SERVICE_URL}
      TOWN_SERVICE_URL: ${TOWN_SERVICE_URL}
    depends_on:
      - postgres_rumor
      - task-service
      - character_service
      - town_service
    volumes:
      - postgres_rumor_data:/var/lib/postgresql/data
      - ./db/rumors_service.sql:/docker-entrypoint-initdb.d/init.sql

  shop-service:
    image: mycallangel0/shop-service:v1.3.0
    deploy:
      replicas: 3
    depends_on:
      - postgres_shop
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_shop:5432/${PG_SHOP_DB}"
      SPRING_DATASOURCE_USERNAME: ${PG_SHOP_USER}
      SPRING_DATASOURCE_PASSWORD: ${PG_SHOP_PASSWORD}
      SERVER_PORT: 3005
      SERVICE_NAME: shop-service
      GATEWAY_PORT: ${GATEWAY_PORT}
      SERVICE_DISCOVERY_URL: ${SERVICE_DISCOVERY_URL}

  roleplay-service:
    image: mycallangel0/roleplay-service:v1.3.0
    deploy:
      replicas: 3
    depends_on:
      - redis_game
    environment:
      SPRING_DATA_REDIS_HOST: redis_game
      SPRING_DATA_REDIS_PORT: 6379
      REDIS_EXPIRATION_TIME: 30
      SERVER_PORT: 3008
      SERVICE_NAME: roleplay-service
      GATEWAY_PORT: ${GATEWAY_PORT}
      SERVICE_DISCOVERY_URL: ${SERVICE_DISCOVERY_URL}
      
  character_service:
    image: nelldino/character-service:1.6
    deploy:
      replicas: 3
    restart: always
    environment:
      DATABASE_URL: "postgresql://${PG_CHARACTER_USER}:${PG_CHARACTER_PASSWORD}@postgres_character:5432/${PG_CHARACTER_DB}"
      PORT: 3006
      SERVICE_DISCOVERY_URL: http://service_discovery:8500
    command: uvicorn main:app --host 0.0.0.0 --port 3006 --reload
    depends_on:
      - postgres_character
      - service_discovery

  town_service:
    image: nelldino/town-service:2.0
    deploy:
      replicas: 3
    restart: always
    environment:
      DATABASE_URL: "postgresql://${PG_TOWN_USER}:${PG_TOWN_PASSWORD}@postgres_town:5432/${PG_TOWN_DB}"
      PORT: 3007
      SERVICE_DISCOVERY_URL: http://service_discovery:8500
    command: uvicorn main:app --host 0.0.0.0 --port 3007 --reload
    depends_on:
      - postgres_town
      - service_discovery

  task-service:
    image: lucianlupan/task_service:1.0
    container_name: task-service
    depends_on:
      - postgres_tasks
      - redis_task
    environment:
      POSTGRES_HOST: postgres_tasks
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${PG_TASK_USER}
      POSTGRES_PASSWORD: ${PG_TASK_PASSWORD}
      POSTGRES_DB: ${PG_TASK_DB}
      REDIS_URL: "redis://redis_task:6379"
    volumes:
      - ./db/task_service.sh:/app/task_service.sh:ro
    command: sh -c "/app/task_service.sh && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  voting-service:
    image: lucianlupan/voting_service:1.0
    container_name: voting-service
    depends_on:
      - postgres_voting
      - redis_voting
    environment:
      POSTGRES_HOST: postgres_voting
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${PG_VOTING_USER}
      POSTGRES_PASSWORD: ${PG_VOTING_PASSWORD}
      POSTGRES_DB: ${PG_VOTING_DB}
      REDIS_URL: "redis://redis_voting:6379"
    volumes:
      - ./db/voting_service.sh:/app/voting_service.sh:ro
    command: sh -c "/app/voting_service.sh && python manage.py migrate && python manage.py runserver 0.0.0.0:8001"

volumes:
  postgres_user_management_data:
  postgres_shop_data:
  postgres_communication_data:
  postgres_rumor_data:
  postgres_character_data:
  postgres_town_data:
  postgres_tasks_data:
  postgres_voting_data:
  redis_game_data:
  redis_roleplay_data:
  redis_communication_data:
  redis_task_data:
  redis_voting_data:
