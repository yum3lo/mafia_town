version: "3.9"

services:
  postgres_user_management:
    image: postgres:15
    container_name: user_management_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER_MANAGEMENT_USER}
      POSTGRES_PASSWORD: ${PG_USER_MANAGEMENT_PASSWORD}
      POSTGRES_DB: ${PG_USER_MANAGEMENT_DB}
    ports:
      - "${PG_USER_MANAGEMENT_PORT}:5432"
    volumes:
      - postgres_user_management_data:/var/lib/postgresql/data
      - ./db/user_management_service.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${PG_USER_MANAGEMENT_USER} -d ${PG_USER_MANAGEMENT_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_shop:
    image: postgres:15
    container_name: shop_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_SHOP_USER}
      POSTGRES_PASSWORD: ${PG_SHOP_PASSWORD}
      POSTGRES_DB: ${PG_SHOP_DB}
    ports:
      - "${PG_SHOP_PORT}:5432"
    volumes:
      - postgres_shop_data:/var/lib/postgresql/data
      - ./db/customization_shop_service.sql:/docker-entrypoint-initdb.d/customization_shop_service.sql

  postgres_communication:
    image: postgres:15
    container_name: communication_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_COMMUNICATION_USER}
      POSTGRES_PASSWORD: ${PG_COMMUNICATION_PASSWORD}
      POSTGRES_DB: ${PG_COMMUNICATION_DB}
    ports:
      - "${PG_COMMUNICATION_PORT}:5432"
    volumes:
      - postgres_communication_data:/var/lib/postgresql/data
      - ./db/communication_service.sql:/docker-entrypoint-initdb.d/init.sql

  postgres_rumors:
    image: postgres:15
    container_name: rumors_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_RUMORS_USER}
      POSTGRES_PASSWORD: ${PG_RUMORS_PASSWORD}
      POSTGRES_DB: ${PG_RUMORS_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    ports:
      - "${PG_RUMORS_PORT}:5432"
    volumes:
      - postgres_rumors_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_RUMORS_USER} -d ${PG_RUMORS_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_character:
    image: postgres:15
    container_name: character_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_CHARACTER_USER}
      POSTGRES_PASSWORD: ${PG_CHARACTER_PASSWORD}
      POSTGRES_DB: ${PG_CHARACTER_DB}
    ports:
      - "${PG_CHARACTER_PORT}:5432"
    volumes:
      - postgres_character_data:/var/lib/postgresql/data
      - ./db/character_service.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${PG_CHARACTER_USER} -d ${PG_CHARACTER_DB}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_town:
    image: postgres:15
    container_name: town_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_TOWN_USER}
      POSTGRES_PASSWORD: ${PG_TOWN_PASSWORD}
      POSTGRES_DB: ${PG_TOWN_DB}
    ports:
      - "${PG_TOWN_PORT}:5432"
    volumes:
      - postgres_town_data:/var/lib/postgresql/data
      - ./db/town_service.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_TOWN_USER} -d ${PG_TOWN_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_tasks:
    image: postgres:15
    container_name: tasks_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_TASK_USER}
      POSTGRES_PASSWORD: ${PG_TASK_PASSWORD}
      POSTGRES_DB: ${PG_TASK_DB}
    volumes:
      - postgres_tasks_data:/var/lib/postgresql/data
    ports:
      - "${PG_TASKS_PORT}:5432"

  postgres_voting:
    image: postgres:15
    container_name: voting_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_VOTING_USER}
      POSTGRES_PASSWORD: ${PG_VOTING_PASSWORD}
      POSTGRES_DB: ${PG_VOTING_DB}
    volumes:
      - postgres_voting_data:/var/lib/postgresql/data
    ports:
      - "${PG_VOTING_PORT}:5432"

  redis_game:
    image: redis:7
    container_name: game_cache
    restart: always
    ports:
      - "${REDIS_GAME_PORT}:6379"
    volumes:
      - redis_game_data:/data

  redis_seeder_game:
    image: node:18
    container_name: redis_seeder_game
    depends_on:
      - redis_game
    volumes:
      - ./db/game_service.mjs:/app/game_service.mjs
    environment:
      REDIS_GAME_HOST: ${REDIS_GAME_HOST}
      REDIS_GAME_PORT: ${REDIS_GAME_PORT}
    working_dir: /app
    command: ["sh", "-c", "npm install redis && node game_service.mjs"]
    restart: "on-failure"

  redis_roleplay:
    image: redis:7
    container_name: roleplay_cache
    restart: always
    ports:
      - "${REDIS_ROLEPLAY_PORT}:6379"
    volumes:
      - redis_roleplay_data:/data

  redis_communication:
    image: redis:7
    container_name: communication_cache
    restart: always
    ports:
      - "${REDIS_COMMUNICATION_PORT}:6379"
    volumes:
      - redis_communication_data:/data

  user_management_service:
    image: yum3lo/mafia-user_management-service:1.3
    container_name: user_management_service
    depends_on:
      postgres_user_management:
        condition: service_healthy
    ports:
      - "${SERVER_USER_MANAGEMENT_PORT}:${SERVER_USER_MANAGEMENT_PORT}"
    environment:
      DATABASE_URL: postgres://${PG_USER_MANAGEMENT_USER}:${PG_USER_MANAGEMENT_PASSWORD}@postgres_user_management:5432/${PG_USER_MANAGEMENT_DB}

  game_service:
    image: yum3lo/mafia-game-service:1.3
    container_name: game_service
    depends_on:
      - redis_game
    ports:
      - "${SERVER_GAME_PORT}:${SERVER_GAME_PORT}"
    environment:
      REDIS_GAME_HOST: ${REDIS_GAME_HOST}
      REDIS_GAME_PORT: ${REDIS_GAME_PORT}

  communication_service:
    image: valeriafz/mafia-communication-service:latest
    container_name: communication_service
    ports:
      - "${SERVER_COMMUNICATION_PORT}:${SERVER_COMMUNICATION_PORT}"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${PG_COMMUNICATION_USER}:${PG_COMMUNICATION_PASSWORD}@postgres_communication:5432/${PG_COMMUNICATION_DB}
      REDIS_URL: redis://redis_communication:6379
      PORT: 3003
      USER_SERVICE_URL: http://localhost:3003/mock
      GAME_SERVICE_URL: http://localhost:3003/mock
      ROLEPLAY_SERVICE_URL: http://localhost:3003/mock
      TOWN_SERVICE_URL: http://localhost:3003/mock
      VOTING_SERVICE_URL: http://localhost:3003/mock
    depends_on:
      - postgres_communication
      - redis_communication
    restart: unless-stopped

  rumor_service:
    image: valeriafz/rumors-service:v1.0.0
    container_name: rumor_service
    restart: always
    ports:
      - "${SERVER_RUMORS_PORT}:${SERVER_RUMORS_PORT}"
    environment:
      DATABASE_URL: "postgresql://${PG_RUMORS_USER}:${PG_RUMORS_PASSWORD}@postgres_rumors:5432/${PG_RUMORS_DB}?schema=public"
      PORT: ${SERVER_RUMORS_PORT}
      NODE_ENV: development
    depends_on:
      postgres_rumors:
        condition: service_healthy

  shop_service:
    image: mycallangel0/shop-service:v1.0.0
    container_name: shop-service
    depends_on:
      - postgres_shop
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_shop:5432/${PG_SHOP_DB}
      SPRING_DATASOURCE_USERNAME: ${PG_SHOP_USER}
      SPRING_DATASOURCE_PASSWORD: ${PG_SHOP_PASSWORD}
    ports:
      - "${SERVER_SHOP_PORT}:8080"

  roleplay_service:
    image: mycallangel0/roleplay-service:v1.0.0
    container_name: roleplay-service
    depends_on:
      - redis_roleplay
    environment:
      SPRING_DATA_REDIS_HOST: redis_roleplay
      SPRING_DATA_REDIS_PORT: ${REDIS_ROLEPLAY_PORT}
      REDIS_EXPIRATION_TIME: 30
    ports:
      - "${SERVER_ROLEPLAY_PORT}:8081"

  character-service:
    image: nelldino/character-service:1.0
    container_name: character-service
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${SERVER_CHARACTER_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      DATABASE_URL: postgresql://${PG_CHARACTER_USER}:${PG_CHARACTER_PASSWORD}@postgres_character:5432/${PG_CHARACTER_DB}
      PORT: ${SERVER_CHARACTER_PORT}
    ports:
      - "${SERVER_CHARACTER_PORT}:${SERVER_CHARACTER_PORT}"
    depends_on:
      postgres_character:
        condition: service_healthy

  town-service:
    image: nelldino/town-service:1.4
    container_name: town-service
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_TOWN_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      DATABASE_URL: postgresql://${PG_TOWN_USER}:${PG_TOWN_PASSWORD}@postgres_town:5432/${PG_TOWN_DB}
      PORT: ${SERVER_TOWN_PORT}
    ports:
      - "${SERVER_TOWN_PORT}:${SERVER_TOWN_PORT}"
    command: uvicorn main:app --host 0.0.0.0 --port ${SERVER_TOWN_PORT} --reload
    depends_on:
      postgres_town:
        condition: service_healthy

  task_service:
    image: lucianlupan/task_service:1.0
    container_name: task-service
    depends_on:
      - postgres_tasks
    environment:
      POSTGRES_HOST: postgres_tasks
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${PG_TASK_USER}
      POSTGRES_PASSWORD: ${PG_TASK_PASSWORD}
      POSTGRES_DB: ${PG_TASK_DB}
    ports:
      - "${SERVER_TASK_PORT}:8000"

  voting_service:
    image: lucianlupan/voting_service:1.0
    container_name: voting-service
    depends_on:
      - postgres_voting
    environment:
      POSTGRES_HOST: postgres_voting
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${PG_VOTING_USER}
      POSTGRES_PASSWORD: ${PG_VOTING_PASSWORD}
      POSTGRES_DB: ${PG_VOTING_DB}
    ports:
      - "${SERVER_VOTING_PORT}:8000"

volumes:
  postgres_user_management_data:
  postgres_shop_data:
  postgres_communication_data:
  postgres_rumors_data:
  postgres_character_data:
  postgres_town_data:
  postgres_tasks_data:
  postgres_voting_data:
  redis_game_data:
  redis_roleplay_data:
  redis_communication_data:
