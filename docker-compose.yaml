version: "3.9"

services:
  postgres_user_management:
    image: postgres:15
    container_name: user_management_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER_MANAGEMENT_USER}
      POSTGRES_PASSWORD: ${PG_USER_MANAGEMENT_PASSWORD}
      POSTGRES_DB: ${PG_USER_MANAGEMENT_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_management_data:/var/lib/postgresql/data
      - ./db/user_management_service.sql:/docker-entrypoint-initdb.d/init.sql

  postgres_shop:
    image: postgres:15
    container_name: shop_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_SHOP_USER}
      POSTGRES_PASSWORD: ${PG_SHOP_PASSWORD}
      POSTGRES_DB: ${PG_SHOP_DB}
    ports:
      - "5442:5432"
    volumes:
      - postgres_shop_data:/var/lib/postgresql/data

  postgres_communication:
    image: postgres:15
    container_name: communication_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_COMMUNICATION_USER}
      POSTGRES_PASSWORD: ${PG_COMMUNICATION_PASSWORD}
      POSTGRES_DB: ${PG_COMMUNICATION_DB}
    ports:
      - "5452:5432"
    volumes:
      - postgres_communication_data:/var/lib/postgresql/data
      - ./db/communication_service.sql:/docker-entrypoint-initdb.d/init.sql

  postgres_rumors:
    image: postgres:15
    container_name: rumors_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_RUMORS_USER}
      POSTGRES_PASSWORD: ${PG_RUMORS_PASSWORD}
      POSTGRES_DB: ${PG_RUMORS_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    ports:
      - "5462:5432"
    volumes:
      - postgres_rumors_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_RUMORS_USER} -d ${PG_RUMORS_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis_game:
    image: redis:7
    container_name: game_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_game_data:/data

  redis_seeder_game:
    image: node:18
    container_name: redis_seeder_game
    depends_on:
      - redis_game
    volumes:
      - ./db/game_service.mjs:/app/game_service.mjs
    environment:
      REDIS_HOST: redis_game
      REDIS_PORT: 6379
    working_dir: /app
    command: ["sh", "-c", "npm install redis && node game_service.mjs"]
    restart: "on-failure"

  redis_roleplay:
    image: redis:7
    container_name: roleplay_cache
    restart: always
    ports:
      - "6389:6379"
    volumes:
      - redis_roleplay_data:/data

  redis_communication:
    image: redis:7
    container_name: communication_cache
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - redis_communication_data:/data

  user_management_service:
    image: yum3lo/mafia-user_management-service:1.2
    container_name: user_management_service
    depends_on:
      - postgres_user_management
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgres://${PG_USER_MANAGEMENT_USER}:${PG_USER_MANAGEMENT_PASSWORD}@postgres_user_management:5432/${PG_USER_MANAGEMENT_DB}

  game_service:
    image: yum3lo/mafia-game-service:1.2
    container_name: game_service
    depends_on:
      - redis_game
    ports:
      - "3002:3002"
    environment:
      REDIS_HOST: redis_game
      REDIS_PORT: 6379

  communication_service:
    image: valeriafz/mafia-communication-service:latest
    container_name: communication_service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${PG_COMMUNICATION_USER}:${PG_COMMUNICATION_PASSWORD}@postgres_communication:5432/${PG_COMMUNICATION_DB}
      REDIS_URL: redis://redis_communication:6379
      PORT: 3003
    depends_on:
      - postgres_communication
      - redis_communication
    restart: unless-stopped

  rumors_service:
    image: valeriafz/rumors-service:v1.0.0
    container_name: rumors_service
    restart: always
    ports:
      - "3004:3004"
    environment:
      DATABASE_URL: "postgresql://${PG_RUMORS_USER}:${PG_RUMORS_PASSWORD}@postgres_rumors:5432/${PG_RUMORS_DB}?schema=public"
      PORT: 3004
      NODE_ENV: development
    depends_on:
      postgres_rumors:
        condition: service_healthy

volumes:
  postgres_user_management_data:
  postgres_shop_data:
  postgres_communication_data:
  postgres_rumors_data:
  redis_game_data:
  redis_roleplay_data:
  redis_communication_data: